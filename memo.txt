

＜機能＞


＜F1>：完了
・会員登録機能（完了）
　・仮登録
　・メールリンク踏む
　・本登録
・ログイン＆ログアウト機能（完了）
・ユーザープロフィール機能（完了）

＜F2>：完了
・投稿機能
・投稿一覧
・投稿詳細
・※投稿編集機能（いらない、テンプレートめんどい）
・投稿削除機能

＜F3>：完了
・いいね機能
　・投稿に対して、紐づく
　・「いいね」はcreate&deleteで実装する
　・一つの投稿に対して、一人のユーザーは「いいね」の回数は一回
　・各投稿は、「いいね」の数を保有する
　・Ajax
　・配列型で
　
・コメント機能
　・投稿に対して、紐づく
　・何回でもコメントできる
　・Ajax

＜F4>：完了
・フォロー機能（Ajax）
　①フォローしているかどうかを判断する関数
　②フォロー状態によって、フォローかアンフォローのボタンを作成
　③フォローしている人、フォロワーをリスト形式で返す
　④Ajaxで実装する

＜F5>：完了
ここはテンプレートタグで処理する
→今のままだと、Ajaxでデータ送信していないので、更新される時に消える
→Viewでの処理後、like.html内で処理完了させる
・いいね数、コメント数（Ajax)（完了）
・フォロー数、フォロワー数（完了）
・フォロー、フォロワー一覧（完了）
※ログインしていないユーザーを使用して、モデルにアクセスすると例外エラーが発生するので
そこの部分で例外処理を記述する。
もし、ログインしている場合としていない場合で処理を分岐する


<F6>：壊滅的
・デザイン
・ここは既存SNSのデザインをパクる
・写真がない場合（初期ユーザーや登録したばかり）の時はURLで代用する

＜F7>：完了
・投稿検索機能
　→投稿者、内容の2つにキーワードが含まれている投稿を返す
　→Postモデルに問い合わせを送り、結果を返す
　→ここは、post/baseでフォームを置いて常に実装する
・ユーザー検索機能（ユーザーネームで指定、キーワードが含まれているかの確認）
　→account/feedのみは継承せず、ログイン状態とかもこのテンプレート内で処理する
　→ユーザー検索はここで行う。投稿に対しては触れずにユーザーのみ　

＜F7>：優先度低い
・セキュリティ関連（ユーザー権限など、有効化になっていることを確認しておく）
・SQLインジェクション
・パスワード再設定
・メアド再設定

＜F7>：レベル高い
・DM（ダイレクトメッセージ）
・投稿シェア機能
・トレンド機能
・返信機能（リプライ）
・モーダルウィンドウを使用して、よりぽくする
・Ajaxで投稿機能作成（一覧画面から投稿）









